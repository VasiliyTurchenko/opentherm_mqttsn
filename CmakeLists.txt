cmake_minimum_required(VERSION 2.8)

project(opentherm_mqttsn C ASM)
ENABLE_LANGUAGE(ASM)

SET(CMAKE_SYSTEM_NAME Generic)
SET(CMAKE_SYSTEM_PROCESSOR arm)

SET(STM32_CHIP STM32F103C8T6)
SET(STM32Cube_DIR "G:/STM Repository/STM32Cube_FW_F1_V1.6.1")
SET(TOOLCHAIN_PREFIX "G:/gnu_arm_emb")
SET(CMAKE_TOOLCHAIN_FILE "G:/gnu_arm_emb/gcc_stm32.cmake")

message ("CMAKE_TOOLCHAIN_FILE = " ${CMAKE_TOOLCHAIN_FILE})
message("CMAKE_CURRENT_SOURCE_DIR = " ${CMAKE_CURRENT_SOURCE_DIR})
include(${CMAKE_CURRENT_SOURCE_DIR}/sources_list.cmake)

# add opentherm source files
SET(OPENTHERM_SOURCE_DIR "G:/DIY_projects/OpenTherm/C/opentherm/opentherm")
include(${OPENTHERM_SOURCE_DIR}/opentherm_src_list.cmake)
message("OPENTHERM_SOURCE_DIR = " ${OPENTHERM_SOURCE_DIR})

### target MCU
set(TARGET_MCU "stm32f1")

set(STARTUP_CODE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
message("STARTUP_CODE_DIR = " ${STARTUP_CODE_DIR})
set(STARTUP_CODE_SOURCE ${STARTUP_CODE_DIR}/startup_stm32f103xb.s)

#linker
set(LINKER_SCRIPTS_DIR ${CMAKE_CURRENT_SOURCE_DIR})
SET(LDSCRIPTS	${LINKER_SCRIPTS_DIR}/STM32F103C8Tx_FLASH.ld
	        )
message("LDSCRIPTS = " ${LDSCRIPTS})

add_definitions(-DSTM32F103xB)
add_definitions(-DUSE_HAL_DRIVER)
add_definitions(-DDEBUG)
add_definitions(-DMCU_TARGET)

if(CMAKE_BUILD_TYPE MATCHES "Debug")
	message("Compiling with debug info")
	set(CMAKE_CXX_DEBUG_FLAGS "-gdwarf-2 -Og")
else()
	set(CMAKE_CXX_DEBUG_FLAGS "-O3")
endif()

#set(LD_LIBS	"-Wl,-lc -Wl,-lm -Wl,-lnosys")

#$(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

##assembler flags
set(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} -Wall -fdata-sections -ffunction-sections")

##compiler flags
set(GCC_COVERAGE_COMPILE_FLAGS "-mcpu=cortex-m3 -mthumb -march=armv7-m -mfloat-abi=soft  -mno-thumb-interwork -v")
set(GCC_COVERAGE_COMPILE_FLAGS "${GCC_COVERAGE_COMPILE_FLAGS} -Wall -fmessage-length=0 -ffunction-sections --specs=nano.specs")
#set(GCC_COVERAGE_COMPILE_FLAGS "${GCC_COVERAGE_COMPILE_FLAGS} -Wall -fmessage-length=0 -ffunction-sections --specs=nosys.specs")
set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS} ${CMAKE_CXX_DEBUG_FLAGS}")
set(CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS} ${CMAKE_CXX_DEBUG_FLAGS}")

##linker flags passed by the compiler
set(GCC_COVERAGE_LINK_FLAGS "-Wl,-Map=output.map -Wl,--gc-sections -Wl,--verbose -Wl,-V -Wl,--cref")
set(GCC_COVERAGE_LINK_FLAGS "${GCC_COVERAGE_LINK_FLAGS} -Wl,-T${LDSCRIPTS}")

##combine flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}")

set (MASTER_BOARD ${PROJECT_NAME}_master)
set (SLAVE_BOARD ${PROJECT_NAME}_slave)

message("MASTER TARGET NAME = " ${MASTER_BOARD})
message("SLAVE TARGET NAME = " ${SLAVE_BOARD})

add_executable(${MASTER_BOARD}
	                        ${LIST_OF_SOURCES}
				${STARTUP_CODE_SOURCE}
				${LIST_OF_OPENTHERM_SOURCES}
		)
target_compile_definitions(${MASTER_BOARD} PRIVATE -DMASTERBOARD)


STM32_ADD_HEX_BIN_TARGETS(${MASTER_BOARD})
STM32_PRINT_SIZE_OF_TARGETS(${MASTER_BOARD})
#STM32_ADD_DUMP_TARGET(${MASTER_BOARD})

add_executable(${SLAVE_BOARD}
	                        ${LIST_OF_SOURCES}
				${STARTUP_CODE_SOURCE}
				${LIST_OF_OPENTHERM_SOURCES}
		)
target_compile_definitions(${SLAVE_BOARD} PRIVATE -DSLAVEBOARD)

STM32_ADD_HEX_BIN_TARGETS(${SLAVE_BOARD})
STM32_PRINT_SIZE_OF_TARGETS(${SLAVE_BOARD})
#STM32_ADD_DUMP_TARGET(${SLAVE_BOARD})


MESSAGE("*********************")
message("CMAKE_SYSTEM_NAME = " ${CMAKE_SYSTEM_NAME} "      CMAKE_HOST_SYSTEM_NAME = " ${CMAKE_HOST_SYSTEM_NAME})
message("CMAKE_SYSTEM = " ${CMAKE_SYSTEM} "      CMAKE_HOST_SYSTEM = " ${CMAKE_HOST_SYSTEM})
MESSAGE("CMAKE_C_COMPILER = " ${CMAKE_C_COMPILER})
MESSAGE("CMAKE_BUILD_TYPE = " ${CMAKE_BUILD_TYPE})
MESSAGE("CMAKE_CXX_FLAGS = " ${CMAKE_CXX_FLAGS})
MESSAGE("*********************")

set(END)
