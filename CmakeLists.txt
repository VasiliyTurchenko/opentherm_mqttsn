cmake_minimum_required(VERSION 2.8)

project(opentherm_mqttsn C ASM)
ENABLE_LANGUAGE(ASM)

## directories

set(STARTUP_CODE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
message("STARTUP_CODE_DIR = " ${STARTUP_CODE_DIR})

set(LINKER_SCRIPTS_DIR ${CMAKE_CURRENT_SOURCE_DIR})


## different MCUs might be used

set(TARGET_MASTER_MCU "stm32f1")
#set(TARGET_MASTER_MCU "stm32f3")

IF(TARGET_MASTER_MCU MATCHES "stm32f1")

        message	(STATUS "TARGET_MASTER_MCU: " ${TARGET_MASTER_MCU})
	set	(D_MCU "-DSTM32F103xB")
	set	(MASTER_STARTUP_CODE_SOURCE ${STARTUP_CODE_DIR}/startup_stm32f103xb.s)
	SET	(MASTER_LDSCRIPT	${LINKER_SCRIPTS_DIR}/STM32F103C8Tx_FLASH.ld)

	SET	(MASTER_COMPILE_FLAGS -mcpu=cortex-m3 -mthumb -march=armv7-m -mfloat-abi=soft  -mno-thumb-interwork -v)

elseif(TARGET_MASTER_MCU MATCHES "stm32f3")

	message	(STATUS "TARGET_MASTER_MCU: " ${TARGET_MASTER_MCU})
	set	(D_MCU "-DSTM32F303xC")
	set	(MASTER_STARTUP_CODE_SOURCE ${STARTUP_CODE_DIR}/startup_stm32f303xc.s)
	SET	(MASTER_LDSCRIPT	${LINKER_SCRIPTS_DIR}/STM32F303VCTx_FLASH.ld)

	SET	(MASTER_COMPILE_FLAGS -mcpu=cortex-m3 -mthumb -march=armv7-m -mfloat-abi=soft  -mno-thumb-interwork -v)

else()

	message(FATAL_ERROR "TARGET_MASTER_MCU NOT DEFINED!")

endif()

set	(TARGET_SLAVE_MCU "stm32f1")
set	(SLAVE_STARTUP_CODE_SOURCE ${STARTUP_CODE_DIR}/startup_stm32f103xb.s)
SET	(SLAVE_LDSCRIPT	${LINKER_SCRIPTS_DIR}/STM32F103C8Tx_FLASH.ld)
SET	(SLAVE_COMPILE_FLAGS -mcpu=cortex-m3 -mthumb -march=armv7-m -mfloat-abi=soft  -mno-thumb-interwork -v)


message(STATUS "MASTER LDSCRIPT = " ${MASTER_LDSCRIPT})
message(STATUS "SLAVE LDSCRIPT = " ${SLAVE_LDSCRIPT})


### generate map file
FUNCTION(ADD_MAPFILE TARGET)
    IF(EXECUTABLE_OUTPUT_PATH)
      SET(MAPFILENAME ${EXECUTABLE_OUTPUT_PATH}/${TARGET}.map)
    ELSE()
      SET(MAPFILENAME ${TARGET}.map)
    ENDIF()
        message("MAPFILENAME = " ${MAPFILENAME})
ENDFUNCTION()

message("MASTER TARGET NAME = " ${MASTER_BOARD})
message("SLAVE TARGET NAME = " ${SLAVE_BOARD})

message ("CMAKE_TOOLCHAIN_FILE = " ${CMAKE_TOOLCHAIN_FILE})
message("CMAKE_CURRENT_SOURCE_DIR = " ${CMAKE_CURRENT_SOURCE_DIR})

include(${CMAKE_CURRENT_SOURCE_DIR}/sources_list.cmake)

# --------------- add opentherm source files ---------------
SET(OPENTHERM_SOURCE_DIR "G:/DIY_projects/OpenTherm/C/opentherm/opentherm")
include(${OPENTHERM_SOURCE_DIR}/opentherm_src_list.cmake)
message("OPENTHERM_SOURCE_DIR = " ${OPENTHERM_SOURCE_DIR})
# ----------------------------------------------------------

#linker
#SET	(LDSCRIPTS	${LINKER_SCRIPTS_DIR}/STM32F103C8Tx_FLASH.ld )
#message("LDSCRIPTS = " ${LDSCRIPTS})


# MCU independent definitions
add_definitions(-DUSE_HAL_DRIVER)
add_definitions(-DDEBUG)

# for desktop&mcu code
add_definitions(-DMCU_TARGET)

if(CMAKE_BUILD_TYPE MATCHES "Debug")
	message("Compiling with debug info")
	set(CMAKE_CXX_DEBUG_FLAGS "-gdwarf-2 -Og")
else()
	set(CMAKE_CXX_DEBUG_FLAGS "-O3")
endif()

##assembler flags
set(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} -Wall -fdata-sections -ffunction-sections")

##compiler flags
#set(GCC_COVERAGE_COMPILE_FLAGS "-mcpu=cortex-m3 -mthumb -march=armv7-m -mfloat-abi=soft  -mno-thumb-interwork -v")

set(GCC_COVERAGE_COMPILE_FLAGS "${GCC_COVERAGE_COMPILE_FLAGS} -Wall -fmessage-length=0 -ffunction-sections --specs=nano.specs")

#set(GCC_COVERAGE_COMPILE_FLAGS "${GCC_COVERAGE_COMPILE_FLAGS} -Wall -fmessage-length=0 -ffunction-sections --specs=nosys.specs")

set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS} ${CMAKE_CXX_DEBUG_FLAGS}")
set(CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS} ${CMAKE_CXX_DEBUG_FLAGS}")



set (MASTER_BOARD ${PROJECT_NAME}_master_${TARGET_MASTER_MCU})
set (SLAVE_BOARD ${PROJECT_NAME}_slave_${TARGET_SLAVE_MCU})


add_executable(${MASTER_BOARD}
	                        ${LIST_OF_SOURCES}
				${MASTER_STARTUP_CODE_SOURCE}
				${LIST_OF_OPENTHERM_SOURCES}
		)
target_compile_definitions	(
	                                ${MASTER_BOARD} PRIVATE
					-DMASTERBOARD
					${D_MCU}
				)

target_compile_options		(
	                                ${MASTER_BOARD} PRIVATE
					${MASTER_COMPILE_FLAGS}
				)

target_link_options(${MASTER_BOARD} PRIVATE "-Wl,-Map=${MASTER_BOARD}.map" "-Wl,-T${MASTER_LDSCRIPT}")


STM32_ADD_HEX_BIN_TARGETS(${MASTER_BOARD})
STM32_PRINT_SIZE_OF_TARGETS(${MASTER_BOARD})
#STM32_ADD_DUMP_TARGET(${MASTER_BOARD})

add_executable(${SLAVE_BOARD}
	                        ${LIST_OF_SOURCES}
				${SLAVE_STARTUP_CODE_SOURCE}
				${LIST_OF_OPENTHERM_SOURCES}
		)
target_compile_definitions	(
	                                ${SLAVE_BOARD} PRIVATE
					-DSLAVEBOARD
					${D_MCU}
				)

target_compile_options		(
	                                ${SLAVE_BOARD} PRIVATE
					${SLAVE_COMPILE_FLAGS}
				)

target_link_options(${SLAVE_BOARD} PRIVATE "-Wl,-Map=${SLAVE_BOARD}.map" "-Wl,-T${SLAVE_LDSCRIPT}")

STM32_ADD_HEX_BIN_TARGETS(${SLAVE_BOARD})
STM32_PRINT_SIZE_OF_TARGETS(${SLAVE_BOARD})
#STM32_ADD_DUMP_TARGET(${SLAVE_BOARD})



##linker flags passed by the compiler
set	(
	        GCC_COVERAGE_LINK_FLAGS
		"-Wl,--gc-sections \
		 -Wl,--verbose \
		 -Wl,-V \
		 -Wl,--cref"
	)

message("GCC_COVERAGE_LINK_FLAGS = " ${GCC_COVERAGE_LINK_FLAGS})


##combine flags
SET	(	CMAKE_CXX_FLAGS
	        "${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}"
	)

SET	(	CMAKE_C_FLAGS
	        "${CMAKE_C_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}"
	)


#ADD_MAPFILE(${MASTER_BOARD})
#message("MAPFILENAME = " ${MAPFILENAME})


MESSAGE("*********************")
message("CMAKE_SYSTEM_NAME = " ${CMAKE_SYSTEM_NAME} "      CMAKE_HOST_SYSTEM_NAME = " ${CMAKE_HOST_SYSTEM_NAME})
message("CMAKE_SYSTEM = " ${CMAKE_SYSTEM} "      CMAKE_HOST_SYSTEM = " ${CMAKE_HOST_SYSTEM})
MESSAGE("CMAKE_C_COMPILER = " ${CMAKE_C_COMPILER})
MESSAGE("CMAKE_BUILD_TYPE = " ${CMAKE_BUILD_TYPE})
MESSAGE("CMAKE_CXX_FLAGS = " ${CMAKE_CXX_FLAGS})
MESSAGE("*********************")
